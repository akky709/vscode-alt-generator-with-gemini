{
  "name": "alt-tag-generator",
  "displayName": "ALT Generator with Gemini",
  "description": "Auto-generate ALT attributes for img tags using Gemini API (supports HTML/PHP/JSX/TSX with static paths)",
  "version": "1.0.0",
  "publisher": "akky",
  "icon": "images/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/akky709/vscode-alt-generator-with-gemini"
  },
  "engines": {
    "vscode": "^1.80.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "files": [
    "out/**/*.js",
    "images/**",
    "README.md",
    "LICENSE",
    "node_modules/node-fetch/**",
    "node_modules/whatwg-url/**",
    "node_modules/tr46/**",
    "node_modules/webidl-conversions/**"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "alt-generator.generateAlt",
        "title": "Generate ALT attribute for img tags"
      },
      {
        "command": "alt-generator.generateVideoAriaLabel",
        "title": "Generate aria-label attribute for video tags"
      },
      {
        "command": "alt-generator.clearApiKey",
        "title": "Clear Gemini API Key (for debugging)"
      }
    ],
    "configuration": {
      "properties": {
        "altGenGemini.geminiApiKey": {
          "order": 0,
          "type": "string",
          "default": "",
          "description": "Gemini API Key",
          "markdownDescription": "Gemini API Key ([Get API key from Google AI Studio](https://aistudio.google.com/app/api-keys))  \n\n**Note:** The API key is stored securely and displayed as dots for security.  \n[Clear API Key](command:alt-generator.clearApiKey)",
          "editPresentation": "singlelineText"
        },
        "altGenGemini.geminiApiModel": {
          "order": 1,
          "type": "string",
          "default": "gemini-2.5-flash",
          "enum": [
            "gemini-2.5-pro",
            "gemini-2.5-flash",
            "gemini-2.5-flash-8b"
          ],
          "enumDescriptions": [
            "Most advanced model for complex tasks",
            "Fast and intelligent (recommended)",
            "Ultra-fast processing"
          ],
          "enumItemLabels": [
            "Gemini 2.5 Pro",
            "Gemini 2.5 Flash (Recommended)",
            "Gemini 2.5 Flash-Lite"
          ],
          "description": "Gemini API Model",
          "markdownDescription": "Gemini API model to use"
        },
        "altGenGemini.generationMode": {
          "order": 2,
          "type": "string",
          "default": "SEO",
          "enum": [
            "SEO",
            "A11Y"
          ],
          "enumDescriptions": [
            "SEO: Content optimized for search engines and crawlers",
            "A11Y: Content optimized for screen reader users"
          ],
          "enumItemLabels": [
            "SEO",
            "A11Y"
          ],
          "description": "Generation Mode"
        },
        "altGenGemini.a11yDescriptionLength": {
          "order": 3,
          "type": "string",
          "default": "standard",
          "enum": [
            "standard",
            "detailed"
          ],
          "enumDescriptions": [
            "Standard: Balanced descriptions that provide essential information (50-120 chars for Japanese, 60-130 chars for English)",
            "Detailed: Comprehensive descriptions for complex images (100-200 chars for Japanese, 100-200 chars for English)"
          ],
          "enumItemLabels": [
            "Standard",
            "Detailed"
          ],
          "description": "A11Y Description Length",
          "markdownDescription": "**A11Y mode only:** Control the level of detail in generated ALT text descriptions.  \n\n**Standard** (Recommended): Provides clear, essential information without being verbose. Suitable for most images.  \n**Detailed**: Includes comprehensive details about colors, layout, emotions, and context. Best for complex images or when detailed description is critical for understanding.  \n\n**Note:** The surrounding text analysis feature already helps avoid redundancy, so both options maintain good accessibility."
        },
        "altGenGemini.insertionMode": {
          "order": 4,
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "confirm"
          ],
          "enumDescriptions": [
            "Insert generated ALT tags immediately",
            "Review before insertion"
          ],
          "enumItemLabels": [
            "Auto",
            "Manual"
          ],
          "description": "Insertion Mode"
        },
        "altGenGemini.outputLanguage": {
          "order": 5,
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "ja",
            "en"
          ],
          "enumItemLabels": [
            "Auto",
            "日本語",
            "English"
          ],
          "description": "Output Language"
        },
        "altGenGemini.decorativeKeywords": {
          "order": 6,
          "type": "array",
          "default": [
            "icon-",
            "bg-",
            "deco-"
          ],
          "items": {
            "type": "string"
          },
          "description": "Decorative Image Keywords"
        },
        "altGenGemini.promptSeo": {
          "order": 7,
          "type": "string",
          "default": "",
          "editPresentation": "multilineText",
          "description": "Custom Prompt for SEO Mode",
          "markdownDescription": "Custom prompt for SEO mode. Leave empty to use built-in defaults. See README for details."
        },
        "altGenGemini.promptA11y": {
          "order": 8,
          "type": "string",
          "default": "",
          "editPresentation": "multilineText",
          "description": "Custom Prompt for A11Y Mode",
          "markdownDescription": "Custom prompt for A11Y mode. Leave empty to use built-in defaults. See README for details."
        },
        "altGenGemini.promptVideo": {
          "order": 9,
          "type": "string",
          "default": "",
          "editPresentation": "multilineText",
          "description": "Custom Prompt for Video Mode",
          "markdownDescription": "Custom prompt for video aria-label. Leave empty to use built-in defaults. See README for details."
        },
        "altGenGemini.a11yContextEnabled": {
          "order": 10,
          "type": "boolean",
          "default": true,
          "description": "A11Y: Analyze Surrounding Text",
          "markdownDescription": "**A11Y mode only:** Analyze surrounding text to avoid redundant ALT descriptions.  \n\n**How it works:**  \n- Finds parent elements (like `<section>`, `<div>`) containing the image  \n- Sends the text within those elements to Gemini AI along with the image  \n- If the text already describes the image, sets `alt=\"\"` to prevent double reading by screen readers  \n\n**Note:** This increases token usage (~100-400 tokens per image) but significantly improves accessibility."
        },
        "altGenGemini.a11yContextRange": {
          "order": 11,
          "type": "number",
          "default": 1500,
          "minimum": 200,
          "maximum": 5000,
          "description": "A11Y: Context Search Range",
          "markdownDescription": "**A11Y mode only:** How far to search for parent elements containing relevant text (in characters).  \n\n**Examples:**  \n- `500`: Finds nearby parent elements (simple layouts)  \n- `1500`: Finds distant parent elements (nested layouts) ← Recommended  \n- `3000+`: For very complex page structures  \n\n**Note:** Larger values improve accuracy without increasing token usage."
        }
      }
    },
    "keybindings": [
      {
        "command": "alt-generator.generateAlt",
        "key": "ctrl+alt+a",
        "mac": "cmd+alt+a",
        "when": "editorTextFocus"
      },
      {
        "command": "alt-generator.generateVideoAriaLabel",
        "key": "ctrl+alt+v",
        "mac": "cmd+alt+v",
        "when": "editorTextFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts"
  },
  "devDependencies": {
    "@types/node": "^18.0.0",
    "@types/node-fetch": "^2.6.13",
    "@types/vscode": "^1.80.0",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.0",
    "typescript": "^5.0.0"
  },
  "dependencies": {
    "node-fetch": "^2.6.12"
  }
}
